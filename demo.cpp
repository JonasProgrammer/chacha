
#include "chacha/chacha.hpp"

#include <cstdint>

#include <array>
#include <chrono>
#include <iomanip>
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>

template <typename T, typename Rep, typename Period>
static T float_duration(const std::chrono::duration<Rep, Period>& duration, T mul = T(1))
{
	return duration.count() * mul * (T(Period::num) / T(Period::den));
	static_assert(std::is_floating_point<T>::value, "Can only cast to floating point types.");
}

struct hexdump
{
	const void* data;
	std::size_t size;
};

static std::ostream& operator << (std::ostream& lhs, hexdump rhs)
{
	const std::uint8_t* p = static_cast<const std::uint8_t*>(rhs.data);
	std::size_t size = rhs.size;

	auto old_fill = lhs.fill('0');

	for (; size--; ++p)
	{
		lhs << std::hex << std::setw(2) << static_cast<unsigned>(*p);
	}

	lhs.fill(old_fill);

	return lhs;
}

static const std::array<std::uint8_t, 32>& get_test_key()
{
	static const std::array<std::uint8_t, 32> key = {
		0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
		0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
		0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA, 0x99, 0x88,
		0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00
	};

	return key;
}

void verify_implementation()
{
	static const std::array<std::uint8_t, 512> expected = {
		0x91, 0xad, 0xf8, 0x28, 0x19, 0x5d, 0x09, 0xcb, 0x90, 0xc7, 0xa7, 0x48, 0xd7, 0xce, 0x04, 0x32, 
		0x1e, 0x89, 0x77, 0x64, 0xcb, 0x82, 0xf6, 0x88, 0x38, 0xf2, 0x09, 0x4f, 0xa1, 0xc7, 0x11, 0xfa, 
		0x96, 0xaa, 0xe5, 0xe1, 0xc5, 0xb7, 0x8f, 0x0c, 0xa9, 0x07, 0x8f, 0x90, 0x2e, 0x77, 0x1b, 0x3e, 
		0x8a, 0x83, 0x33, 0x10, 0x0f, 0x44, 0x50, 0x50, 0x95, 0xf4, 0xf8, 0xb8, 0x44, 0xdd, 0xaa, 0x54, 
		0xd6, 0xa6, 0x2d, 0xc1, 0xa3, 0x26, 0x83, 0x33, 0xf2, 0x86, 0x7c, 0x0b, 0xc1, 0x13, 0x4c, 0x61, 
		0xb1, 0x7d, 0x99, 0x4c, 0x2d, 0x2c, 0x2e, 0x5f, 0xb1, 0x42, 0x00, 0xa5, 0x44, 0x22, 0x4d, 0x45, 
		0xb5, 0x30, 0x0d, 0xfa, 0x5a, 0xfc, 0x37, 0xfd, 0xb7, 0x56, 0xfd, 0xd7, 0x11, 0x8f, 0xea, 0xc5, 
		0x3b, 0x12, 0x0d, 0xd5, 0x7d, 0xc9, 0xd1, 0x1f, 0x24, 0x9d, 0x50, 0xa0, 0x51, 0x78, 0xc1, 0x16, 
		0xab, 0x47, 0xe7, 0x1c, 0x45, 0xfc, 0xbf, 0xdf, 0x75, 0xd1, 0xb9, 0xbd, 0xd3, 0x47, 0xa6, 0x81, 
		0xaf, 0x7e, 0xa0, 0x14, 0xda, 0xe2, 0xc5, 0xb2, 0xee, 0x86, 0x36, 0x91, 0x72, 0xdb, 0x85, 0x74, 
		0x16, 0x83, 0xa6, 0xa5, 0x58, 0x4b, 0xcf, 0xfa, 0xd3, 0x62, 0xa7, 0xc7, 0x4a, 0x93, 0x93, 0x83, 
		0x24, 0x8c, 0x87, 0xc3, 0xea, 0x36, 0x08, 0xc7, 0xcd, 0xb3, 0xb3, 0x3c, 0x61, 0x2e, 0xf0, 0x9e, 
		0xc6, 0x46, 0xca, 0x9b, 0xeb, 0xba, 0x44, 0xd1, 0x64, 0x97, 0x3c, 0x7f, 0x46, 0xc3, 0x0b, 0xcc, 
		0x15, 0x58, 0x35, 0x7c, 0xda, 0x32, 0x8c, 0x4b, 0xf7, 0xa6, 0x60, 0x11, 0xb8, 0xb1, 0x62, 0xad, 
		0xfd, 0x58, 0x58, 0x7c, 0x5a, 0xa7, 0x8b, 0x63, 0x73, 0x4c, 0x0c, 0xc4, 0x72, 0x19, 0x10, 0xbe, 
		0x04, 0x5e, 0x45, 0x51, 0xdc, 0xd5, 0x09, 0xe3, 0x9c, 0xc1, 0xcd, 0xfd, 0xa4, 0x8e, 0x8d, 0x0c, 
		0xb2, 0xdd, 0x6c, 0xe2, 0x46, 0x12, 0xff, 0x7e, 0x77, 0xd8, 0x2a, 0x18, 0x77, 0xba, 0x94, 0xe3, 
		0xcd, 0x80, 0x60, 0x66, 0xa8, 0x2c, 0x59, 0x73, 0x54, 0x16, 0x4d, 0x4f, 0xd6, 0xbe, 0xf9, 0xe8, 
		0xe4, 0xbd, 0x9d, 0xef, 0x28, 0xfe, 0x69, 0x7e, 0x9a, 0x87, 0xc9, 0x27, 0x25, 0xc7, 0x26, 0x2d, 
		0xac, 0x6c, 0xec, 0xd4, 0x7d, 0x33, 0xfb, 0x5b, 0xf5, 0xf0, 0x89, 0xfb, 0xa6, 0x9d, 0xd8, 0xd0, 
		0x68, 0x18, 0x75, 0x1b, 0xa0, 0xc1, 0xed, 0x31, 0x98, 0x5d, 0x00, 0xf3, 0x07, 0x98, 0xc8, 0x6d, 
		0x2c, 0xaa, 0x77, 0xc2, 0x13, 0x46, 0x41, 0x06, 0xef, 0xea, 0xd4, 0xcd, 0x70, 0x11, 0x27, 0x4a, 
		0x9e, 0xac, 0x49, 0x00, 0xcf, 0x3c, 0xf3, 0x55, 0x13, 0x7c, 0x1a, 0xa1, 0xa7, 0xae, 0x15, 0xe4, 
		0x95, 0x1d, 0x52, 0xc6, 0xa4, 0xc8, 0xd6, 0x3b, 0x95, 0x47, 0xd6, 0x76, 0x5d, 0x6d, 0x5f, 0xbf, 
		0x55, 0xa1, 0x76, 0x56, 0x51, 0x77, 0xef, 0xdc, 0xf1, 0xe2, 0x02, 0x23, 0x80, 0x9e, 0xbd, 0x10, 
		0x35, 0x84, 0xdb, 0xd7, 0x9a, 0x06, 0xca, 0x39, 0x36, 0xfb, 0x4b, 0x36, 0x93, 0x19, 0x15, 0xd0, 
		0x95, 0x87, 0xd3, 0x3a, 0xbc, 0xa0, 0x6b, 0xe4, 0x9b, 0x20, 0xfb, 0x53, 0x30, 0x60, 0xe1, 0xf3, 
		0x9f, 0xcd, 0xbb, 0xc5, 0x96, 0x76, 0x31, 0xdd, 0x5e, 0x05, 0xc2, 0xbf, 0x33, 0xe2, 0xef, 0xe3, 
		0xf5, 0x0e, 0x8b, 0x29, 0x87, 0x27, 0xbc, 0xc6, 0xe4, 0xd4, 0x65, 0x29, 0x51, 0x8d, 0x95, 0x65, 
		0xc9, 0x99, 0xa2, 0xf2, 0xd0, 0x3d, 0x0c, 0xff, 0x01, 0x43, 0x6e, 0xd4, 0xc1, 0xd7, 0xf7, 0xe0, 
		0xc5, 0x9c, 0x4a, 0xe3, 0x19, 0x81, 0x32, 0x25, 0x47, 0x6b, 0x7c, 0xb3, 0x13, 0x10, 0xc1, 0x2a, 
		0x9f, 0x15, 0x90, 0x4d, 0xe2, 0xb1, 0x5b, 0xca, 0x0f, 0x76, 0xd8, 0x78, 0x9b, 0x20, 0x78, 0x92, 
	};

	const auto key_data = get_test_key().data();

	std::array<std::uint8_t, 512> data0, data1, data2;
	std::fill_n(&data0[0], data0.size(), 0xAA);

	chacha::buffered_cipher buff_cipher(chacha::key_bits<256>(), key_data, 0);
	buff_cipher.transform(&data2[0], &data0[0], 77);
	buff_cipher.transform(&data2[77], &data0[77], data0.size() - 77);

	chacha::unbuffered_cipher cipher(chacha::key_bits<256>(), key_data, 0);
	cipher.transform(&data1[0], &data0[0], data0.size());
	cipher.set_block_index(0);
	cipher.transform(&data0[0], &data0[0], data0.size());	

	if (data0 == data1 && data0 == data2 && data0 == expected)
	{
		std::cout << "Implementation verified.\n";
	}
	else
	{
		std::cout << hexdump{ expected.data(), expected.size() } << '\n';
		std::cout << hexdump{ data0.data(), data0.size() } << '\n';
		std::cout << hexdump{ data1.data(), data1.size() } << '\n';
		std::cout << hexdump{ data2.data(), data2.size() } << '\n';
		std::cout << "Implementation BROKEN.\n";
	}
}

void benchmark()
{
	const auto key_data = get_test_key().data();

	// We need to touch each page anyway for the OS to actually map the memory.
	std::vector<char> buf(512 * 1024 * 1024);

	chacha::unbuffered_cipher cipher(chacha::key_bits<256>(), key_data, 0);

	{
		auto start = std::chrono::high_resolution_clock::now();
		cipher.transform(buf.data(), buf.data(), buf.size());
		auto time = float_duration<double>(std::chrono::high_resolution_clock::now() - start);
		std::cout << "ChaCha20 bandwidth: " << buf.size() / time / 1024 / 1024 << " MiB/s";
		std::cout << "\t\t" << hexdump{ &buf[buf.size() - 16], 16 } << std::endl;
	}

	{
		auto start = std::chrono::high_resolution_clock::now();
		cipher.transform(chacha::cipher_rounds::make<12>(), buf.data(), buf.data(), buf.size());
		auto time = float_duration<double>(std::chrono::high_resolution_clock::now() - start);
		std::cout << "ChaCha12 bandwidth: " << buf.size() / time / 1024 / 1024 << " MiB/s";
		std::cout << "\t\t" << hexdump{ &buf[buf.size() - 16], 16 } << std::endl;
	}
	
	{
		auto start = std::chrono::high_resolution_clock::now();
		cipher.transform(chacha::cipher_rounds::make<8>(), buf.data(), buf.data(), buf.size());
		auto time = float_duration<double>(std::chrono::high_resolution_clock::now() - start);
		std::cout << "ChaCha8 bandwidth: " << buf.size() / time / 1024 / 1024 << " MiB/s";
		std::cout << "\t\t" << hexdump{ &buf[buf.size() - 16], 16 } << std::endl;
	}
}

int main()
{
	verify_implementation();
	benchmark();
}
